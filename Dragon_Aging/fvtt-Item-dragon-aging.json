{
  "name": "Dragon Aging",
  "type": "buff",
  "img": "systems/pf1/icons/races/creature-types/dragon.png",
  "system": {
    "description": {
      "value": "<p>&nbsp;</p>\n<table class=\"inner\">\n<tbody>\n<tr>\n<td><strong>Age Category</strong></td>\n<td><strong>Age in Years</strong></td>\n<td><strong>CR</strong></td>\n<td><strong>Size</strong></td>\n<td><strong>Hit Dice</strong></td>\n<td><strong>Natural Armor</strong></td>\n<td><strong>Breath Weapon</strong></td>\n</tr>\n<tr>\n<td>1 Wyrmling</td>\n<td>0&ndash;5</td>\n<td>Base</td>\n<td>Base</td>\n<td>Base</td>\n<td>Base</td>\n<td>Base</td>\n</tr>\n<tr>\n<td>2 Very young</td>\n<td>6&ndash;15</td>\n<td>Base + 2</td>\n<td>Base + 1</td>\n<td>Base + 2</td>\n<td>Base + 3</td>\n<td>Base &times; 2</td>\n</tr>\n<tr>\n<td>3 Young</td>\n<td>16&ndash;25</td>\n<td>Base + 4</td>\n<td>Base + 2</td>\n<td>Base + 4</td>\n<td>Base + 6</td>\n<td>Base &times; 3</td>\n</tr>\n<tr>\n<td>4 Juvenile</td>\n<td>26&ndash;50</td>\n<td>Base + 5</td>\n<td>Base + 2</td>\n<td>Base + 6</td>\n<td>Base + 9</td>\n<td>Base &times; 4</td>\n</tr>\n<tr>\n<td>5 Young adult</td>\n<td>51&ndash;100</td>\n<td>Base + 7</td>\n<td>Base + 3</td>\n<td>Base + 8</td>\n<td>Base + 12</td>\n<td>Base &times; 5</td>\n</tr>\n<tr>\n<td>6 Adult</td>\n<td>101&ndash;200</td>\n<td>Base + 8</td>\n<td>Base + 3</td>\n<td>Base + 10</td>\n<td>Base + 15</td>\n<td>Base &times; 6</td>\n</tr>\n<tr>\n<td>7 Mature adult</td>\n<td>201&ndash;400</td>\n<td>Base + 9</td>\n<td>Base + 3</td>\n<td>Base + 12</td>\n<td>Base + 18</td>\n<td>Base &times; 7</td>\n</tr>\n<tr>\n<td>8 Old</td>\n<td>401&ndash;600</td>\n<td>Base + 11</td>\n<td>Base + 4</td>\n<td>Base + 14</td>\n<td>Base + 21</td>\n<td>Base &times; 8</td>\n</tr>\n<tr>\n<td>9 Very old</td>\n<td>601&ndash;800</td>\n<td>Base + 12</td>\n<td>Base + 4</td>\n<td>Base + 16</td>\n<td>Base + 24</td>\n<td>Base &times; 9</td>\n</tr>\n<tr>\n<td>10 Ancient</td>\n<td>801&ndash;1,000</td>\n<td>Base + 13</td>\n<td>Base + 4</td>\n<td>Base + 18</td>\n<td>Base + 27</td>\n<td>Base &times; 10</td>\n</tr>\n<tr>\n<td>11 Wyrm</td>\n<td>1,001&ndash;1,200</td>\n<td>Base + 14</td>\n<td>Base + 4</td>\n<td>Base + 20</td>\n<td>Base + 30</td>\n<td>Base &times; 11</td>\n</tr>\n<tr>\n<td>12 Great wyrm</td>\n<td>1,201+</td>\n<td>Base + 16</td>\n<td>Base + 5</td>\n<td>Base + 22</td>\n<td>Base + 33</td>\n<td>Base &times; 12</td>\n</tr>\n</tbody>\n</table>\n<p><span id=\"ctl00_MainContent_DataListFeats_ctl00_Label1\"></span></p>\n<table class=\"inner\">\n<tbody>\n<tr>\n<td><strong>Age Category</strong></td>\n<td><strong>Str</strong></td>\n<td><strong>Dex</strong></td>\n<td><strong>Con</strong></td>\n<td><strong>Int</strong></td>\n<td><strong>Wis</strong></td>\n<td><strong>Chr</strong></td>\n</tr>\n<tr>\n<td>1 Wyrmling</td>\n<td>Base</td>\n<td>Base</td>\n<td>Base</td>\n<td>Base</td>\n<td>Base</td>\n<td>Base</td>\n</tr>\n<tr>\n<td>2 Very young</td>\n<td>Base + 4</td>\n<td>Base &ndash; 2</td>\n<td>Base + 2</td>\n<td>Base + 2</td>\n<td>Base + 2</td>\n<td>Base + 2</td>\n</tr>\n<tr>\n<td>3 Young</td>\n<td>Base + 8</td>\n<td>Base &ndash; 2</td>\n<td>Base + 4</td>\n<td>Base + 2</td>\n<td>Base + 2</td>\n<td>Base + 2</td>\n</tr>\n<tr>\n<td>4 Juvenile</td>\n<td>Base + 10</td>\n<td>Base &ndash; 2</td>\n<td>Base + 6</td>\n<td>Base + 4</td>\n<td>Base + 4</td>\n<td>Base + 4</td>\n</tr>\n<tr>\n<td>5 Young adult</td>\n<td>Base + 12</td>\n<td>Base &ndash; 4</td>\n<td>Base + 6</td>\n<td>Base + 4</td>\n<td>Base + 4</td>\n<td>Base + 4</td>\n</tr>\n<tr>\n<td>6 Adult</td>\n<td>Base + 14</td>\n<td>Base &ndash; 4</td>\n<td>Base + 8</td>\n<td>Base + 6</td>\n<td>Base + 6</td>\n<td>Base + 6</td>\n</tr>\n<tr>\n<td>7 Mature adult</td>\n<td>Base + 16</td>\n<td>Base &ndash; 4</td>\n<td>Base + 8</td>\n<td>Base + 6</td>\n<td>Base + 6</td>\n<td>Base + 6</td>\n</tr>\n<tr>\n<td>8 Old</td>\n<td>Base + 18</td>\n<td>Base &ndash; 6</td>\n<td>Base + 10</td>\n<td>Base + 8</td>\n<td>Base + 8</td>\n<td>Base + 8</td>\n</tr>\n<tr>\n<td>9 Very old</td>\n<td>Base + 20</td>\n<td>Base &ndash; 6</td>\n<td>Base + 10</td>\n<td>Base + 8</td>\n<td>Base + 8</td>\n<td>Base + 8</td>\n</tr>\n<tr>\n<td>10 Ancient</td>\n<td>Base + 22</td>\n<td>Base &ndash; 6</td>\n<td>Base + 12</td>\n<td>Base + 10</td>\n<td>Base + 10</td>\n<td>Base + 10</td>\n</tr>\n<tr>\n<td>11 Wyrm</td>\n<td>Base + 24</td>\n<td>Base &ndash; 8</td>\n<td>Base + 12</td>\n<td>Base + 10</td>\n<td>Base + 10</td>\n<td>Base + 10</td>\n</tr>\n<tr>\n<td>12 Great wyrm</td>\n<td>Base + 26</td>\n<td>Base &ndash; 8</td>\n<td>Base + 14</td>\n<td>Base + 12</td>\n<td>Base + 12</td>\n<td>Base + 12</td>\n</tr>\n</tbody>\n</table>\n<p><span id=\"ctl00_MainContent_DataListFeats_ctl00_Label1\">&nbsp;</span></p>\n<table class=\"inner\">\n<tbody>\n<tr>\n<td rowspan=\"2\"><strong>Size</strong></td>\n<td rowspan=\"2\"><strong>Fly Speed (maneuverability)</strong></td>\n<td rowspan=\"2\"><strong>1 Bite</strong></td>\n<td rowspan=\"2\"><strong>2 Claws</strong></td>\n<td rowspan=\"2\"><strong>2 Wings</strong></td>\n<td rowspan=\"2\"><strong>1 Tail Slap</strong></td>\n<td rowspan=\"2\"><strong>1 Crush</strong></td>\n<td rowspan=\"2\"><strong>1 Tail Sweep</strong></td>\n<td colspan=\"2\"><strong>Breath Weapon</strong></td>\n</tr>\n<tr>\n<td><strong>Line</strong></td>\n<td><strong>Cone</strong></td>\n</tr>\n<tr>\n<td>Tiny</td>\n<td>100 ft. (average)</td>\n<td>1d4</td>\n<td>1d3</td>\n<td>&mdash;</td>\n<td>&mdash;</td>\n<td>&mdash;</td>\n<td>&mdash;</td>\n<td>30 ft.</td>\n<td>15 ft.</td>\n</tr>\n<tr>\n<td>Small</td>\n<td>150 ft. (average)</td>\n<td>1d6</td>\n<td>1d4</td>\n<td>&mdash;</td>\n<td>&mdash;</td>\n<td>&mdash;</td>\n<td>&mdash;</td>\n<td>40 ft.</td>\n<td>20 ft.</td>\n</tr>\n<tr>\n<td>Medium</td>\n<td>150 ft. (average)</td>\n<td>1d8</td>\n<td>1d6</td>\n<td>1d4</td>\n<td>&mdash;</td>\n<td>&mdash;</td>\n<td>&mdash;</td>\n<td>60 ft.</td>\n<td>30 ft.</td>\n</tr>\n<tr>\n<td>Large</td>\n<td>200 ft. (poor)</td>\n<td>2d6</td>\n<td>1d8</td>\n<td>1d6</td>\n<td>1d8</td>\n<td>&mdash;</td>\n<td>&mdash;</td>\n<td>80 ft.</td>\n<td>40 ft.</td>\n</tr>\n<tr>\n<td>Huge</td>\n<td>200 ft. (poor)</td>\n<td>2d8</td>\n<td>2d6</td>\n<td>1d8</td>\n<td>2d6</td>\n<td>2d8</td>\n<td>&mdash;</td>\n<td>100 ft.</td>\n<td>50 ft.</td>\n</tr>\n<tr>\n<td>Gargantuan</td>\n<td>250 ft. (clumsy)</td>\n<td>4d6</td>\n<td>2d8</td>\n<td>2d6</td>\n<td>2d8</td>\n<td>4d6</td>\n<td>2d6</td>\n<td>120 ft.</td>\n<td>60 ft.</td>\n</tr>\n<tr>\n<td>Colossal</td>\n<td>250 ft. (clumsy)</td>\n<td>4d8</td>\n<td>4d6</td>\n<td>2d8</td>\n<td>4d6</td>\n<td>4d8</td>\n<td>2d8</td>\n<td>140 ft.</td>\n<td>70 ft.</td>\n</tr>\n</tbody>\n</table>",
      "chat": "",
      "unidentified": ""
    },
    "tags": [],
    "changes": [],
    "changeFlags": {
      "loseDexToAC": false,
      "noEncumbrance": false,
      "mediumArmorFullSpeed": false,
      "heavyArmorFullSpeed": false
    },
    "contextNotes": [],
    "links": {
      "children": []
    },
    "tag": "",
    "useCustomTag": false,
    "flags": {
      "boolean": {},
      "dictionary": {}
    },
    "scriptCalls": [
      {
        "_id": "cmugosjblo9tu1zx",
        "name": "Apply Dragon Aging",
        "img": "icons/svg/dice-target.svg",
        "type": "script",
        "value": "// Cancel out if the buff isn't active to avoid accidental fuckery...\nif(item.hasItemBooleanFlag(\"active\") === false) {\n    return;\n}\n\n// Configure the base Stats for a dragon of this type. Usually found in the bestiary or on a nearby spot on the web page. This is configured for a Red Dragon by default.\n//-------------------------------------------------------------------\nlet baseStats = {\n'cr': 8,\n'size': 3, // Corresponds to Small in the Sizes array below. Starts at 0 and counts up.\n'hd': 10,\n'nac': 8,\n'breathNum': 2,\n'breathSize': 10,\n'str': 19,\n'dex': 14,\n'con': 17,\n'int': 12,\n'wis': 15,\n'cha': 16,\n'age': 0\n};\n\nlet newStats = {};\nlet newAttacks = [];\n\n//-------------------------------------------------------------------\n\n// Size array for re-use.\nconst sizes = [\"fine\", \"dim\", \"tiny\", \"sm\", \"med\", \"lg\", \"huge\", \"grg\", \"col\"];\n\n// All the dragon attacks for normal dragons.\n// Configured for use with Websterguy's createAttack function from Mighty Morphin mod\nconst naturalAttacks = {\n    'Bite': { img: 'systems/pf1/icons/items/inventory/monster-head.jpg', type: 'B,P, and S', primaryAttack: true },\n    'Claw': { img: 'systems/pf1/icons/skills/blood_06.jpg', type: 'B and S', primaryAttack: true },\n    'Wing': { img: 'systems/pf1/icons/skills/blue_02.jpg', type: 'B', primaryAttack: false },\n    'Tail Slap': { img: 'systems/pf1/icons/items/inventory/monster-tail.jpg', type: 'B', primaryAttack: false },\n\t'Tail Sweep': { img: 'systems/pf1/icons/items/inventory/monster-tail.jpg', type: 'B', primaryAttack: true },\n    'Crush': { img: 'systems/pf1/icons/items/inventory/monster-forearm.jpg', type: 'B', primaryAttack: true }\n};\n\n//----------------------------------------------------------------------\n/**\n * Creates an attack and returns it\n * \n * @param {string} actorId id of the actor that is changing shape\n * @param {string} formSize The size of the form being changed to in the format matching data.traits.size\n * @param {Object} attack Attack object containing name, dice details, attack count, and associated special (e.g. trip) if there is one\n * @param {boolean} onlyAttack True if this will be the only natural attack (providing 1.5x stat to damage)\n * @param {Object} [effects={}] Object containing data for effects that may be associated with special properties of this attack\n * @param {string} [source=''] The source of the attack to add to the name\n * @param {string} [type='natural'] The type of attack for categorization on the sheet\n * @returns {Item} natural attack item\n */\nfunction createAttack(actorId, isToken, attack, onlyAttack, effects = {}, source = '', type = 'natural') {\n    let attackData = { system: {} };\n\n    const actorData = (!isToken) ? actor : token.actor; // get actor's data for reference //game.actors.get(actorId).data; // get actor's data for reference\n    // Create attack Item template\n    for (const template of game.system.template.Item.attack.templates) \n    {\n        mergeObject(attackData.system, duplicate(game.system.template.Item.templates[template]));\n    }\n    mergeObject(attackData.system, duplicate(game.system.template.Item.attack));\n    delete attackData.templates;\n\n    // Begin filling in data\n    attackData['name'] = attack.name + (!!source ? ` (${source})` : ''); // Add source to the attack name if there is a source\n    attackData['type'] = 'attack';\n\n    // If attack is labeled as a a primary attack or that attack type is usually primary, or it is the only attack, it is primary\n    attackData['system']['enh'] = attack.enh || null;\n    attackData['system']['attackType'] = 'natural'; // weapon, natural, misc, class ability, etc\n\n    let subAction = game.pf1.documentComponents.ItemAction.defaultData;\n\n    subAction['naturalAttack']['primaryAttack'] = ((attack.primaryAttack || (!!naturalAttacks[attack.name] && naturalAttacks[attack.name].primaryAttack)));\n    subAction['actionType'] = 'mwak'; // melee, ranged, save, combat man., etc\n    subAction['activation']['type'] = 'attack';\n    subAction['duration']['units'] = 'inst';\n    subAction['range']['value'] = '' + (attack.range ?? '');\n    subAction['range']['units'] = 'melee'; // if ranged attack, range in feet. Else melee\n    subAction['ability']['critRange'] = attack.crit || 20;\n    subAction['ability']['critMult'] = attack.critMult || 2;\n    subAction['range']['maxIncrements'] = attack.increment || '';\n    subAction['uses']['per'] = attack.charges ? 'day' : '';\n    subAction['uses']['maxFormula'] = '' + (attack.charges ?? '');\n    subAction['uses']['value'] = attack.charges || 0;\n    subAction['name'] = attack.name;\n\n    // Create extra attacks if the attack count is over 1, label the extras starting at 2 (Claw 2)\n    let extraAttacks = [];\n    for (let i = 1; i < attack.count; i++) {\n        extraAttacks = extraAttacks.concat([['', `${attack.name} ${i + 1}`]]);\n    }\n    if (!!extraAttacks.length) {\n        subAction['attackParts'] = extraAttacks;\n        subAction['attackName'] = `${attack.name} 1`;\n    }\n\n    // Set attack ability to dex if weapon finesse feat and dex >= str or it's a ranged attack. Otherwise it's the actor's normal melee stat or strength\n    if (!!attack.attackAbility)\n    {\n        subAction['ability']['attack'] = attack.attackAbility;\n    }\n    else if (!!actorData.items.find(o => o.type === 'feat' && o.system.tag === 'weaponFinesse') && actorData.system.abilities.dex.total >= actorData.system.abilities.str.total)\n    {\n        subAction['ability']['attack'] = 'dex';\n    }\n    else\n    {\n        subAction['ability']['attack'] = getProperty(actorData, 'system.attributes.attack.meleeAbility') || 'str';\n    }\n//    else if ((isToken) && ((!!actorData.items.contents.find(o => o.type === 'feat' && o.name === 'Weapon Finesse') && actorData.system.abilities.dex.total >= actorData.system.abilities.str.total))) subAction['ability']['attack'] = 'dex';\n\n    // ability damage is strength unless it's a ranged attack\n    subAction['ability']['damage'] = 'str';\n\n    // ability damage multiplier is the passed multiplier or 1.5 for an only attack, 1 for a primary attack, .5 secondary\n    subAction['ability']['damageMult'] = attack.mult || (onlyAttack ? 1.5 : (subAction.naturalAttack.primaryAttack) ? 1 : 0.5);\n\n    // Create attack sizeRoll with the passed dice stats, the actor's size, and the attack type's damage type (or '' if attack name not in naturalAttacks)\n    if (attack.diceSize !== 0) {\n        subAction['damage']['parts'] = [[`sizeRoll(${attack.diceCount}, ${attack.diceSize}, @size, @size)`, (attack.type || naturalAttacks[attack.name]?.type) || '']];\n\n        // Create non-crit bonus damage\n        if (attack.nonCrit) subAction['damage']['nonCritParts'] = [attack.nonCrit];\n    }\n    else {\n        // use the data from nonCrit as the primary damage when diceSize is 0, because it's damage that doesn't scale from size\n        if (attack.nonCrit) subAction['damage']['parts'] = [attack.nonCrit];\n    }\n\n    // Get the image for this attack name\n    attackData['img'] = naturalAttacks[attack.name]?.img || 'systems/pf1/icons/items/inventory/monster-paw-bear.jpg';\n    subAction['img'] = naturalAttacks[attack.name]?.img || 'systems/pf1/icons/items/inventory/monster-paw-bear.jpg';\n\n    attackData['system']['actions'] = [subAction];\n    return attackData;\n}\n\n//----------------------------------------------------------------------\n\nswitch(level.new) {\n\tcase 0:\n\tcase 1:\n\tdefault:\n\t\tnewStats.age = 0;\n\t\tnewStats.cr = baseStats.cr;\n\t\tnewStats.size = sizes[baseStats.size];\n\t\tnewStats.nac = baseStats.nac;\n\n\t\tnewStats.str =  baseStats.str;\n\t\tnewStats.dex =  baseStats.dex;\n\t\tnewStats.con =  baseStats.con;\n\t\tnewStats.int =  baseStats.int;\n\t\tnewStats.wis =  baseStats.wis;\n\t\tnewStats.cha =  baseStats.cha;\n\n\t\tnewStats.hd = baseStats.hd;\n\t\tnewStats.breathNum = baseStats.breathNum;\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n\tcase 2:\n\t\tnewStats.age = 6;\n\t\tnewStats.cr =  baseStats.cr + 2;\n\t\tnewStats.size =  sizes[Math.min(8, baseStats.size + 1)];\n\t\tnewStats.nac =  baseStats.nac + (level.new - 1) * 3;\n\n\t\tnewStats.str =  baseStats.str + 4;\n\t\tnewStats.dex =  baseStats.dex - 2;\n\t\tnewStats.con =  baseStats.con + 2;\n\t\tnewStats.int =  baseStats.int + 2;\n\t\tnewStats.wis =  baseStats.wis + 2;\n\t\tnewStats.cha =  baseStats.cha + 2;\n\n\t\tnewStats.hd = baseStats.hd + 2;\n\t\tnewStats.breathNum = (baseStats.breathNum * level.new);\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n\tcase 3:\n\t\tnewStats.age = 16;\n\t\tnewStats.cr =  baseStats.cr + 4;\n\t\tnewStats.size =  sizes[Math.min(8, baseStats.size + 2)];\n\t\tnewStats.nac =  baseStats.nac + (level.new - 1) * 3;\n\n\t\tnewStats.str =  baseStats.str + 8;\n\t\tnewStats.dex =  baseStats.dex - 2;\n\t\tnewStats.con =  baseStats.con + 4;\n\t\tnewStats.int =  baseStats.int + 2;\n\t\tnewStats.wis =  baseStats.wis + 2;\n\t\tnewStats.cha =  baseStats.cha + 2;\n\n\t\tnewStats.hd = baseStats.hd + 4;\n\t\tnewStats.breathNum = (baseStats.breathNum * level.new);\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n\tcase 4:\n\t\tnewStats.age = 26;\n\t\tnewStats.cr =  baseStats.cr + 5;\n\t\tnewStats.size =  sizes[Math.min(8, baseStats.size + 2)];\n\t\tnewStats.nac =  baseStats.nac + (level.new - 1) * 3;\n\t\t\t\n\t\tnewStats.str =  baseStats.str + 10;\n\t\tnewStats.dex =  baseStats.dex - 2;\n\t\tnewStats.con =  baseStats.con + 6;\n\t\tnewStats.int =  baseStats.int + 4;\n\t\tnewStats.wis =  baseStats.wis + 4;\n\t\tnewStats.cha =  baseStats.cha + 4;\n\n\t\tnewStats.hd = baseStats.hd + 6;\n\t\tnewStats.breathNum = (baseStats.breathNum * level.new);\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n\tcase 5:\n\t\tnewStats.age = 51;\n\t\tnewStats.cr =  baseStats.cr + 7;\n\t\tnewStats.size =  sizes[Math.min(8, baseStats.size + 3)];\n\t\tnewStats.nac =  baseStats.nac + (level.new - 1) * 3;\n\t\t\t\n\t\tnewStats.str =  baseStats.str + 12;\n\t\tnewStats.dex =  baseStats.dex - 4;\n\t\tnewStats.con =  baseStats.con + 6;\n\t\tnewStats.int =  baseStats.int + 4;\n\t\tnewStats.wis =  baseStats.wis + 4;\n\t\tnewStats.cha =  baseStats.cha + 4;\n\n\t\tnewStats.hd = baseStats.hd + 8;\n\t\tnewStats.breathNum = (baseStats.breathNum * level.new);\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n\tcase 6:\n\t\tnewStats.age = 101;\n\t\tnewStats.cr =  baseStats.cr + 8;\n\t\tnewStats.size =  sizes[Math.min(8, baseStats.size + 3)];\n\t\tnewStats.nac =  baseStats.nac + (level.new - 1) * 3;\n\t\t\t\n\t\tnewStats.str =  baseStats.str + 14;\n\t\tnewStats.dex =  baseStats.dex - 4;\n\t\tnewStats.con =  baseStats.con + 8;\n\t\tnewStats.int =  baseStats.int + 6;\n\t\tnewStats.wis =  baseStats.wis + 6;\n\t\tnewStats.cha =  baseStats.cha + 6;\n\n\t\tnewStats.hd = baseStats.hd + 10;\n\t\tnewStats.breathNum = (baseStats.breathNum * level.new);\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n\tcase 7:\n\t\tnewStats.age = 201;\n\t\tnewStats.cr =  baseStats.cr + 9;\n\t\tnewStats.size =  sizes[Math.min(8, baseStats.size + 3)];\n\t\tnewStats.nac =  baseStats.nac + (level.new - 1) * 3;\n\t\t\t\n\t\tnewStats.str =  baseStats.str + 16;\n\t\tnewStats.dex =  baseStats.dex - 4;\n\t\tnewStats.con =  baseStats.con + 8;\n\t\tnewStats.int =  baseStats.int + 6;\n\t\tnewStats.wis =  baseStats.wis + 6;\n\t\tnewStats.cha =  baseStats.cha + 6;\n\n\t\tnewStats.hd = baseStats.hd + 12;\n\t\tnewStats.breathNum = (baseStats.breathNum * level.new);\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n\tcase 8:\n\t\tnewStats.age = 401;\n\t\tnewStats.cr =  baseStats.cr + 11;\n\t\tnewStats.size =  sizes[Math.min(8, baseStats.size + 4)];\n\t\tnewStats.nac =  baseStats.nac + (level.new - 1) * 3;\n\t\t\t\n\t\tnewStats.str =  baseStats.str + 18;\n\t\tnewStats.dex =  baseStats.dex - 6;\n\t\tnewStats.con =  baseStats.con + 10;\n\t\tnewStats.int =  baseStats.int + 8;\n\t\tnewStats.wis =  baseStats.wis + 8;\n\t\tnewStats.cha =  baseStats.cha + 8;\n\n\t\tnewStats.hd = baseStats.hd + 14;\n\t\tnewStats.breathNum = (baseStats.breathNum * level.new);\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n\tcase 9:\n\t\tnewStats.age = 601;\n\t\tnewStats.cr =  baseStats.cr + 12;\n\t\tnewStats.size =  sizes[Math.min(8, baseStats.size + 4)];\n\t\tnewStats.nac =  baseStats.nac + (level.new - 1) * 3;\n\t\t\t\n\t\tnewStats.str =  baseStats.str + 20;\n\t\tnewStats.dex =  baseStats.dex - 6;\n\t\tnewStats.con =  baseStats.con + 10;\n\t\tnewStats.int =  baseStats.int + 8;\n\t\tnewStats.wis =  baseStats.wis + 8;\n\t\tnewStats.cha =  baseStats.cha + 8;\n\n\t\tnewStats.hd = baseStats.hd + 16;\n\t\tnewStats.breathNum = (baseStats.breathNum * level.new);\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n\tcase 10:\n\t\tnewStats.age = 801;\n\t\tnewStats.cr =  baseStats.cr + 13;\n\t\tnewStats.size =  sizes[Math.min(8, baseStats.size + 4)];\n\t\tnewStats.nac =  baseStats.nac + (level.new - 1) * 3;\n\t\t\t\n\t\tnewStats.str =  baseStats.str + 22;\n\t\tnewStats.dex =  baseStats.dex - 6;\n\t\tnewStats.con =  baseStats.con + 12;\n\t\tnewStats.int =  baseStats.int + 10;\n\t\tnewStats.wis =  baseStats.wis + 10;\n\t\tnewStats.cha =  baseStats.cha + 10;\n\n\t\tnewStats.hd = baseStats.hd + 18;\n\t\tnewStats.breathNum = (baseStats.breathNum * level.new);\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n\tcase 11:\n\t\tnewStats.age = 1001;\n\t\tnewStats.cr =  baseStats.cr + 14;\n\t\tnewStats.size =  sizes[Math.min(8, baseStats.size + 4)];\n\t\tnewStats.nac =  baseStats.nac + (level.new - 1) * 3;\n\t\t\t\n\t\tnewStats.str =  baseStats.str + 24;\n\t\tnewStats.dex =  baseStats.dex - 8;\n\t\tnewStats.con =  baseStats.con + 12;\n\t\tnewStats.int =  baseStats.int + 10;\n\t\tnewStats.wis =  baseStats.wis + 10;\n\t\tnewStats.cha =  baseStats.cha + 10;\n\n\t\tnewStats.hd = baseStats.hd + 20;\n\t\tnewStats.breathNum = (baseStats.breathNum * level.new);\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n\tcase 12:\n\t\tnewStats.age = 1201;\n\t\tnewStats.cr =  baseStats.cr + 16;\n\t\tnewStats.size =  sizes[Math.min(8, baseStats.size + 5)];\n\t\tnewStats.nac =  baseStats.nac + (level.new - 1) * 3;\n\t\t\t\n\t\tnewStats.str =  baseStats.str + 26;\n\t\tnewStats.dex =  baseStats.dex - 8;\n\t\tnewStats.con =  baseStats.con + 14;\n\t\tnewStats.int =  baseStats.int + 12;\n\t\tnewStats.wis =  baseStats.wis + 12;\n\t\tnewStats.cha =  baseStats.cha + 12;\n\n\t\tnewStats.hd = baseStats.hd + 22;\n\t\tnewStats.breathNum = (baseStats.breathNum * level.new);\n\t\tnewStats.breathSize = baseStats.breathSize;\n\tbreak;\n}\n\nswitch(newStats.size) {\n\tdefault:\n\tcase 'tiny':\n\t\tnewStats.flySpeed= 100;\n\t\tnewStats.flyType= 'average';\n\t\tnewStats.breathLine= 30;\n\t\tnewStats.breathCone= 15;\n\t\tnewStats.attacks= [\n\t\t\t{name: 'Bite', diceCount: 1, diceSize: 4, mult:1.5, count: 1},\n\t\t\t{name: 'Claw', diceCount: 1, diceSize: 3, count: 2}\n\t\t];\n\tbreak;\n\tcase 'sm':\n\t\tnewStats.flySpeed= 150;\n\t\tnewStats.flyType= 'average';\n\t\tnewStats.breathLine= 40;\n\t\tnewStats.breathCone= 20;\n\t\tnewStats.attacks= [\n\t\t\t{name: 'Bite', diceCount: 1, diceSize: 6, range: 10, units: 'ft', mult:1.5, count: 1},\n\t\t\t{name: 'Claw', diceCount: 1, diceSize: 4, count: 2}\n\t\t];\n\tbreak;\n\tcase 'med':\n\t\tnewStats.flySpeed= 150;\n\t\tnewStats.flyType= 'average';\n\t\tnewStats.breathLine= 60;\n\t\tnewStats.breathCone= 30;\n\t\tnewStats.attacks= [\n\t\t\t{name: 'Bite', diceCount: 1, diceSize: 8, range: 10, units: 'ft', mult:1.5, count: 1},\n\t\t\t{name: 'Claw', diceCount: 1, diceSize: 6, count: 2},\n\t\t\t{name: 'Wing', diceCount: 1, diceSize: 4, count: 2}\n\t\t];\n\tbreak;\n\tcase 'lg':\n\t\tnewStats.flySpeed= 200;\n\t\tnewStats.flyType= 'poor';\n\t\tnewStats.breathLine= 80;\n\t\tnewStats.breathCone= 40;\n\t\tnewStats.attacks= [\n\t\t\t{name: 'Bite', diceCount: 2, diceSize: 6, range: 10, units: 'ft', mult:1.5, count: 1},\n\t\t\t{name: 'Claw', diceCount: 1, diceSize: 8, count: 2},\n\t\t\t{name: 'Wing', diceCount: 1, diceSize: 6, count: 2},\n\t\t\t{name: 'Tail Slap', diceCount: 1, diceSize: 8, mult: 1.5, count: 1}\n\t\t];\n\tbreak;\n\tcase 'huge':\n\t\tnewStats.flySpeed= 200;\n\t\tnewStats.flyType= 'poor';\n\t\tnewStats.breathLine= 100;\n\t\tnewStats.breathCone= 50;\n\t\tnewStats.attacks= [\n\t\t\t{name: 'Bite', diceCount: 2, diceSize: 8, range: 15, units: 'ft', mult:1.5, count: 1},\n\t\t\t{name: 'Claw', diceCount: 2, diceSize: 6, count: 2},\n\t\t\t{name: 'Wing', diceCount: 1, diceSize: 8, count: 2},\n\t\t\t{name: 'Tail Slap', diceCount: 2, diceSize: 6, mult: 1.5, count: 1},\n\t\t\t{name: 'Crush', diceCount: 2, diceSize: 8, mult: 1.5, count: 1}\n\t\t];\n\tbreak;\n\tcase 'grg':\n\t\tnewStats.flySpeed= 250;\n\t\tnewStats.flyType= 'clumsy';\n\t\tnewStats.breathLine= 120;\n\t\tnewStats.breathCone= 60;\n\t\tnewStats.attacks= [\n\t\t\t{name: 'Bite', diceCount: 4, diceSize: 6, range: 20, units: 'ft', mult:1.5, count: 1},\n\t\t\t{name: 'Claw', diceCount: 2, diceSize: 8, count: 2},\n\t\t\t{name: 'Wing', diceCount: 2, diceSize: 6, count: 2},\n\t\t\t{name: 'Tail Slap', diceCount: 2, diceSize: 8, mult: 1.5, count: 1},\n\t\t\t{name: 'Crush', diceCount: 4, diceSize: 6, mult: 1.5, count: 1},\n\t\t\t{name: 'Tail Sweep', diceCount: 2, diceSize: 6, range: 30, units: 'ft', mult: 1.5, count: 1}\n\t\t];\n\tbreak;\n\tcase 'col':\n\t\tnewStats.flySpeed= 250;\n\t\tnewStats.flyType= 'clumsy';\n\t\tnewStats.breathLine= 140;\n\t\tnewStats.breathCone= 70;\n\t\tnewStats.attacks= [\n\t\t\t{name: 'Bite', diceCount: 4, diceSize: 8, range: 25, units: 'ft', mult:1.5, count: 1},\n\t\t\t{name: 'Claw', diceCount: 4, diceSize: 6, count: 2},\n\t\t\t{name: 'Wing', diceCount: 2, diceSize: 8, count: 2},\n\t\t\t{name: 'Tail Slap', diceCount: 4, diceSize: 6, mult: 1.5, count: 1},\n\t\t\t{name: 'Crush', diceCount: 4, diceSize: 8, mult: 1.5, count: 1},\n\t\t\t{name: 'Tail Sweep', diceCount: 2, diceSize: 8, range: 40, units: 'ft', mult: 1.5, count: 1}\n\t\t];\n\tbreak;\n}\n\n    let theActor = !!token ? token.actor : actor;\n    let breathWeapon = theActor.items.find(o => o.name === \"Breath Weapon\" && o.type === \"attack\");\n    let dragonClass = theActor.items.find(o => o.name === \"Dragon\" && o.type === \"class\");\n    let hpDifference = theActor.system.attributes.hp.max - theActor.system.attributes.hp.value;\n\n    await dragonClass.update({'system.level':  newStats.hd});\n    await dragonClass.update({'system.hp':  Math.floor(6.5 * newStats.hd)});\n\n    await breathWeapon.actions.getName(\"Attack\").update({'damage.parts': [[newStats.breathNum + 'd' + newStats.breathSize]], 'measureTemplate.size': \"\" + (breathWeapon.actions.getName(\"Attack\").data.measureTemplate.type === 'cone' ? newStats.breathCone : newStats.breathLine)});\n\t\n    await theActor.update({'system.traits.stature': 'long', 'system.details.age': newStats.age, 'system.details.cr.base': newStats.cr, 'system.traits.size': newStats.size, 'system.attributes.naturalAC': newStats.nac, 'system.abilities.str.value': newStats.str, 'system.abilities.dex.value': newStats.dex, 'system.abilities.con.value': newStats.con, 'system.abilities.int.value': newStats.int, 'system.abilities.wis.value': newStats.wis, 'system.abilities.cha.value': newStats.cha, 'system.attributes.speed.fly.base': newStats.flySpeed, 'system.attributes.speed.fly.maneuverability': newStats.flyType});\n\t\n    await theActor.update({'system.attributes.hp.value': (theActor.system.attributes.hp.max - hpDifference)});\n\n    for(let i = 0; i < newStats.attacks.length; i++) {\n        let attack = duplicate(newStats.attacks[i]);\n        newAttacks.push(createAttack(theActor.id, theActor.isToken, attack, false));\n    }\n\t\n    let itemsToDelete = theActor.items\n        .filter(item => {\n            if(item.type === 'attack') {\n                if(item.name.match(/bite|claw|tail slap|wing|crush|tail sweep/i)) {\n                    return item;\n                }\n            }\n        }).map(item => item.id);\n    \n    await theActor.deleteEmbeddedDocuments(\"Item\", itemsToDelete);\n    await theActor.createEmbeddedDocuments('Item', newAttacks);",
        "category": "changeLevel",
        "hidden": false
      },
      {
        "_id": "sl4gakxqgwtypemo",
        "name": "Toggle activation",
        "img": "icons/svg/dice-target.svg",
        "type": "script",
        "value": "if(state) {\n    item.addItemBooleanFlag(\"active\");\n}\nelse {\n    item.removeItemBooleanFlag(\"active\");\n}",
        "category": "toggle",
        "hidden": false
      }
    ],
    "buffType": "perm",
    "active": false,
    "level": null,
    "duration": {
      "value": "",
      "units": "",
      "start": 148828752277
    },
    "hideFromToken": false,
    "conditionals": [],
    "identifiedName": "Dragon Aging",
    "range": {
      "maxIncrements": 1
    },
    "size": "med"
  },
  "effects": [],
  "flags": {
    "exportSource": {
      "world": "reotrl",
      "system": "pf1",
      "coreVersion": "10.291",
      "systemVersion": "0.82.5"
    },
    "core": {
      "sourceId": "Item.N79Q8Y7MFp3brjvI"
    },
    "scene-packer": {
      "hash": "c3ea60cf94c7171ad0540099bfd3a408414befc9",
      "sourceId": "Item.uoE56qw00psZX7NF"
    }
  },
  "_stats": {
    "systemId": "pf1",
    "systemVersion": "0.82.5",
    "coreVersion": "10.291",
    "createdTime": 1679973618700,
    "modifiedTime": 1679999545711,
    "lastModifiedBy": "UA00c6VJjhkkAMA5"
  }
}